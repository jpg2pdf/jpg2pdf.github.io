{"version":3,"sources":["contexts/theme.js","config.js","components/Navbar/Navbar.js","components/Header/Header.js","components/About/About.js","components/Jpg2Pdf/Jpg2Pdf.js","components/Tags/Tags.js","components/ScrollToTop/ScrollToTop.js","components/Contact/Contact.js","components/Footer/Footer.js","App.js","index.js"],"names":["ThemeContext","createContext","ThemeProvider","children","useState","themeName","setThemeName","useEffect","darkMediaQuery","window","matchMedia","matches","addEventListener","e","Provider","value","toggleTheme","name","localStorage","setItem","header","about","tags","contact","Navbar","useContext","showNavList","setShowNavList","className","style","display","href","onClick","type","Header","homepage","title","About","heading","CustomImage","mimeType","this","split","Image","fileToImageURL","file","Promise","resolve","reject","image","onload","onerror","Error","src","URL","createObjectURL","A4_PAPER_DIMENSIONS","A4_PAPER_RATIO","generatePdfFromImages","images","doc","jsPDF","deletePage","forEach","imageDimensions","dimensions","width","height","imageRatio","imageScaleFactor","scaledImageHeight","imageDimensionsOnA4","addPage","addImage","imageType","pdfURL","output","open","Jpg2Pdf","uploadedImages","setUploadedImages","cleanUpUploadedImages","revokeObjectURL","length","map","alt","disabled","htmlFor","id","accept","onChange","event","fileList","target","files","fileToImagePromises","Array","from","all","then","combinedImages","concat","multiple","async","charset","Tags","tag","uniqid","ScrollToTop","isVisible","setIsVisible","toggleVisibility","pageYOffset","removeEventListener","fontSize","Contact","Footer","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.91de5a14.chunk.js","sourcesContent":["import { createContext, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst ThemeContext = createContext()\n\nconst ThemeProvider = ({ children }) => {\n  const [themeName, setThemeName] = useState('light')\n\n  useEffect(() => {\n    const darkMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setThemeName(darkMediaQuery.matches ? 'dark' : 'light')\n    darkMediaQuery.addEventListener('change', (e) => {\n      setThemeName(e.matches ? 'dark' : 'light')\n    });\n  }, [])\n\n  const toggleTheme = () => {\n    const name = themeName === 'dark' ? 'light' : 'dark'\n    localStorage.setItem('themeName', name)\n    setThemeName(name)\n  }\n\n  return (\n    <ThemeContext.Provider value={[{ themeName, toggleTheme }]}>\n      {children}\n    </ThemeContext.Provider>\n  )\n}\n\nThemeProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport { ThemeProvider, ThemeContext }\n","const header = {\n  // all the properties are optional - can be left empty or deleted\n  homepage: 'https://jpg2pdf.github.io/',\n  title: 'JPG to PDF',\n}\n\nconst about = {\n  // all the properties are optional - can be left empty or deleted\n  heading: '',\n}\n\nconst tags = [\n  // skills can be added or removed\n  // if there are no skills, Skills section won't show up\n  'JPG',\n  'Converter',\n  'PDF',\n  'JPEG',\n  'Tools',\n]\n\nconst contact = {\n  // email is optional - if left empty Contact section won't show up\n  email: '',\n}\n\nexport { header, about, tags, contact }\n","import { useContext, useState } from 'react'\nimport Brightness2Icon from '@material-ui/icons/Brightness2'\nimport WbSunnyRoundedIcon from '@material-ui/icons/WbSunnyRounded'\n// import MenuIcon from '@material-ui/icons/Menu'\n// import CloseIcon from '@material-ui/icons/Close'\nimport { ThemeContext } from '../../contexts/theme'\nimport { contact } from '../../config'\nimport './Navbar.css'\n\nconst Navbar = () => {\n  const [{ themeName, toggleTheme }] = useContext(ThemeContext)\n  const [showNavList, setShowNavList] = useState(false)\n\n  const toggleNavList = () => setShowNavList(!showNavList)\n\n  return (\n    <nav className='center nav'>\n      <ul\n        style={{ display: showNavList ? 'flex' : null }}\n        className='nav__list'\n      >\n\n        {contact.email ? (\n          <li className='nav__list-item'>\n            <a\n              href='#contact'\n              onClick={toggleNavList}\n              className='link link--nav'\n            >\n              Contact\n            </a>\n          </li>\n        ) : null}\n      </ul>\n\n      <button\n        type='button'\n        onClick={toggleTheme}\n        className='btn btn--icon nav__theme'\n        aria-label='toggle theme'\n      >\n        {themeName === 'dark' ? <WbSunnyRoundedIcon /> : <Brightness2Icon />}\n      </button>\n      {/* <button\n        type='button'\n        onClick={toggleNavList}\n        className='btn btn--icon nav__hamburger'\n        aria-label='toggle navigation'\n      >\n        {showNavList ? <CloseIcon /> : <MenuIcon />}\n      </button> */}\n    </nav>\n  )\n}\n\nexport default Navbar\n","import { header } from '../../config'\nimport Navbar from '../Navbar/Navbar'\nimport './Header.css'\n\nconst Header = () => {\n  const { homepage, title } = header\n\n  return (\n    <header className='header center'>\n      <h3>\n        {homepage ? (\n          <a href={homepage} className='link'>\n            {title}\n          </a>\n        ) : (\n          title\n        )}\n      </h3>\n      <Navbar />\n    </header>\n  )\n}\n\nexport default Header\n","import { about } from '../../config'\nimport './About.css'\n\nconst About = () => {\n  const { heading } = about\n\n  return (\n    <div className='about center'>\n      {heading && (\n        <h1>\n          {heading}\n        </h1>\n      )}\n    </div>\n  )\n}\n\nexport default About\n","/* eslint-disable */\nimport React, { useState } from \"react\";\nimport jsPDF from \"jspdf\";\n\nimport \"./Jpg2Pdf.css\";\n\n// New class with additional fields for Image\nclass CustomImage extends Image {\n  constructor(mimeType) {\n    super();\n    this.mimeType = mimeType;\n  }\n\n  // `imageType` is a required input for generating a PDF for an image.\n  get imageType(){\n    return this.mimeType.split(\"/\")[1];\n  }\n};\n\n// Each image is loaded and an object URL is created.\nconst fileToImageURL = (file) => {\n  return new Promise((resolve, reject) => {\n    const image = new CustomImage(file.type);\n\n    image.onload = () => {\n      resolve(image);\n    };\n\n    image.onerror = () => {\n      reject(new Error(\"Failed to convert File to Image\"));\n    };\n\n    image.src = URL.createObjectURL(file);\n  });\n};\n\n// The dimensions are in millimeters.\nconst A4_PAPER_DIMENSIONS = {\n  width: 210,\n  height: 297,\n};\n\nconst A4_PAPER_RATIO = A4_PAPER_DIMENSIONS.width / A4_PAPER_DIMENSIONS.height;\n\n// Calculates the best possible position of an image on the A4 paper format,\n// so that the maximal area of A4 is used and the image ratio is preserved.\nconst imageDimensionsOnA4 = (dimensions) => {\n  const isLandscapeImage = dimensions.width >= dimensions.height;\n\n  // If the image is in landscape, the full width of A4 is used.\n  if (isLandscapeImage) {\n    return {\n      width: A4_PAPER_DIMENSIONS.width,\n      height:\n        A4_PAPER_DIMENSIONS.width / (dimensions.width / dimensions.height),\n    };\n  }\n\n  // If the image is in portrait and the full height of A4 would skew\n  // the image ratio, we scale the image dimensions.\n  const imageRatio = dimensions.width / dimensions.height;\n  if (imageRatio > A4_PAPER_RATIO) {\n    const imageScaleFactor =\n      (A4_PAPER_RATIO * dimensions.height) / dimensions.width;\n\n    const scaledImageHeight = A4_PAPER_DIMENSIONS.height * imageScaleFactor;\n\n    return {\n      height: scaledImageHeight,\n      width: scaledImageHeight * imageRatio,\n    };\n  }\n\n  // The full height of A4 can be used without skewing the image ratio.\n  return {\n    width: A4_PAPER_DIMENSIONS.height / (dimensions.height / dimensions.width),\n    height: A4_PAPER_DIMENSIONS.height,\n  };\n};\n\n// Creates a PDF document containing all the uploaded images.\nconst generatePdfFromImages = (images) => {\n  // Default export is A4 paper, portrait, using millimeters for units.\n  const doc = new jsPDF();\n\n  // We let the images add all pages,\n  // therefore the first default page can be removed.\n  doc.deletePage(1);\n\n  images.forEach((image) => {\n    const imageDimensions = imageDimensionsOnA4({\n      width: image.width,\n      height: image.height,\n    });\n\n    doc.addPage();\n    doc.addImage(\n      image.src,\n      image.imageType,\n      // Images are vertically and horizontally centered on the page.\n      (A4_PAPER_DIMENSIONS.width - imageDimensions.width) / 2,\n      (A4_PAPER_DIMENSIONS.height - imageDimensions.height) / 2,\n      imageDimensions.width,\n      imageDimensions.height\n    );\n  });\n\n  // Creates a PDF and opens it in a new browser tab.\n  const pdfURL = doc.output(\"bloburl\");\n  window.open(pdfURL, \"_blank\");\n};\n\nfunction Jpg2Pdf() {\n  // State for uploaded images\n  const [uploadedImages, setUploadedImages] = useState([]);\n\n  const handleImageUpload = (event) => {\n      // `event.target.files` is of type `FileList`,\n      // we convert it to Array for easier manipulation.\n      const fileList = event.target.files;\n      const fileArray = fileList ? Array.from(fileList) : [];\n\n      // Uploaded images are read and the app state is updated.\n      const fileToImagePromises = fileArray.map(fileToImageURL);\n      Promise.all(fileToImagePromises).then((images) => {\n        const combinedImages = uploadedImages.concat(images);\n        setUploadedImages(combinedImages);\n      });\n  };\n\n  const cleanUpUploadedImages = () => {\n    setUploadedImages([]);\n    uploadedImages.forEach((image) => {\n      // The URL.revokeObjectURL() releases an existing object URL\n      // which was previously created by URL.createObjectURL().\n      // It lets the browser know not to keep the reference to the file any longer.\n      URL.revokeObjectURL(image.src);\n    });\n  };\n\n  const handleGeneratePdfFromImages = () => {\n    generatePdfFromImages(uploadedImages);\n    cleanUpUploadedImages();\n  };\n\n  return (\n    <>\n      <h1 className=\"h1main\">JPG to PDF Free Converter</h1>\n      {/* Overview of uploaded images */}\n      <div className=\"images-container\">\n        {uploadedImages.length > 0 ? (\n          uploadedImages.map((image) => (\n            <img alt=\"Uploaded Images\" key={image.src} src={image.src} className=\"uploaded-image\" />\n          ))\n        ) : (\n          <p>Upload some images...</p>\n        )}\n      </div>\n\n      {/* Buttons for uploading images and generating a PDF */}\n      <div className=\"buttons-container\">\n        {/* Clears images */}\n        <button\n          onClick={cleanUpUploadedImages}\n          className=\"button\"\n          disabled={uploadedImages.length === 0}\n        >\n          Clear\n        </button>\n\n        {/* Uploads images */}\n        <label htmlFor=\"file-input\">\n          <span className=\"button\">Add</span>\n          <input\n            id=\"file-input\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={handleImageUpload}\n            // Native file input is hidden only for styling purposes\n            style={{ display: \"none\" }}\n            multiple\n          />\n        </label>\n\n        {/* Generates PDF */}\n        <button\n          onClick={handleGeneratePdfFromImages}\n          className=\"button\"\n          disabled={uploadedImages.length === 0}\n        >\n          Generate\n        </button>\n      </div>\n      <br/>\n      <div>\n        <p>JPG2PDF is a free in-browser converter for converting your JPG images into PDF documents. It's simple, just add images and click generate.</p>\n      </div>\n      <br/>\n      {/* <div className=\"share__btn__container\"> </div> */}\n      <a href=\"https://twitter.com/share?ref_src=twsrc%5Etfw\" className=\"twitter-share-button\" data-show-count=\"false\" target=\"_blank\">Tweet</a><script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n    </>\n  );\n}\n\nexport default Jpg2Pdf;","import uniqid from 'uniqid'\nimport { tags } from '../../config'\nimport './Tags.css'\n\nconst Tags = () => {\n  if (!tags.length) return null\n\n  return (\n    <section className='section tags' id='tags'>\n      <ul className='tags__list'>\n        {tags.map((tag) => (\n          <li key={uniqid()} className='tags__list-item btn btn--plain'>\n            {tag}\n          </li>\n        ))}\n      </ul>\n    </section>\n  )\n}\n\nexport default Tags\n","import React, { useEffect, useState } from 'react'\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward'\nimport './ScrollToTop.css'\n\nconst ScrollToTop = () => {\n  const [isVisible, setIsVisible] = useState(false)\n\n  useEffect(() => {\n    const toggleVisibility = () =>\n      window.pageYOffset > 500 ? setIsVisible(true) : setIsVisible(false)\n\n    window.addEventListener('scroll', toggleVisibility)\n    return () => window.removeEventListener('scroll', toggleVisibility)\n  }, [])\n\n  return isVisible ? (\n    <div className='scroll-top'>\n      <a href='#top'>\n        <ArrowUpwardIcon fontSize='large' />\n      </a>\n    </div>\n  ) : null\n}\n\nexport default ScrollToTop\n","import { contact } from '../../config'\nimport './Contact.css'\n\nconst Contact = () => {\n  if (!contact.email) return null\n\n  return (\n    <section className='section contact center' id='contact'>\n      <h2 className='section__title'>Contact</h2>\n      <a href={`mailto:${contact.email}`}>\n        <span type='button' className='btn btn--outline'>\n          Email me\n        </span>\n      </a>\n    </section>\n  )\n}\n\nexport default Contact\n","import './Footer.css'\n\nconst Footer = () => (\n  <footer className='footer'>\n    <a\n      href='https://github.com/limitpointinf0'\n      className='link footer__link'\n    >\n      Created By Limitpointinf0\n    </a>\n  </footer>\n)\n\nexport default Footer\n","import { useContext } from 'react'\nimport { ThemeContext } from './contexts/theme'\nimport Header from './components/Header/Header'\nimport About from './components/About/About'\nimport Jpg2Pdf from './components/Jpg2Pdf/Jpg2Pdf'\nimport Tags from './components/Tags/Tags'\nimport ScrollToTop from './components/ScrollToTop/ScrollToTop'\nimport Contact from './components/Contact/Contact'\nimport Footer from './components/Footer/Footer'\nimport './App.css'\n\nconst App = () => {\n  const [{ themeName }] = useContext(ThemeContext)\n\n  return (\n    <div id='top' className={`${themeName} app`}>\n      <Header />\n\n      <main>\n        <About />\n        <Jpg2Pdf />\n        <Tags />\n        <Contact />\n      </main>\n\n      <ScrollToTop />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import { render } from 'react-dom'\nimport App from './App'\nimport { ThemeProvider } from './contexts/theme'\nimport './index.css'\n\nrender(\n  <ThemeProvider>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}